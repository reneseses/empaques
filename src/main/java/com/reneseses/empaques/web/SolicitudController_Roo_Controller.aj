// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.reneseses.empaques.web;

import com.reneseses.empaques.domain.Solicitud;
import com.reneseses.empaques.domain.service.SolicitudService;
import com.reneseses.empaques.web.SolicitudController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.bson.types.ObjectId;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SolicitudController_Roo_Controller {
    
    @Autowired
    SolicitudService SolicitudController.solicitudService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SolicitudController.create(@Valid Solicitud solicitud, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, solicitud);
            return "member/solicitudes/create";
        }
        uiModel.asMap().clear();
        solicitudService.saveSolicitud(solicitud);
        return "redirect:/member/solicitudes/" + encodeUrlPathSegment(solicitud.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SolicitudController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Solicitud());
        return "member/solicitudes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SolicitudController.show(@PathVariable("id") ObjectId id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("solicitud", solicitudService.findSolicitud(id));
        uiModel.addAttribute("itemId", id);
        return "member/solicitudes/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SolicitudController.update(@Valid Solicitud solicitud, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, solicitud);
            return "member/solicitudes/update";
        }
        uiModel.asMap().clear();
        solicitudService.updateSolicitud(solicitud);
        return "redirect:/member/solicitudes/" + encodeUrlPathSegment(solicitud.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SolicitudController.updateForm(@PathVariable("id") ObjectId id, Model uiModel) {
        populateEditForm(uiModel, solicitudService.findSolicitud(id));
        return "member/solicitudes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SolicitudController.delete(@PathVariable("id") ObjectId id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Solicitud solicitud = solicitudService.findSolicitud(id);
        solicitudService.deleteSolicitud(solicitud);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/member/solicitudes";
    }
    
    void SolicitudController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("solicitud_fecha_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void SolicitudController.populateEditForm(Model uiModel, Solicitud solicitud) {
        uiModel.addAttribute("solicitud", solicitud);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String SolicitudController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
